{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww28600\viewh17520\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is Spring?\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \strokec2 Spring is essentially a framework that helps developers create enterprise-level applications in Java more easily. It offers tools for almost everything you need in a Java application, from security to web applications, but it's particularly well-known for dependency injection. This means it can automatically manage how different parts of your application are put together, making it easier to organize and change\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 \strokec2 Example:
\f1\b0 \strokec2  In Spring, you can define beans in an XML file or using annotations, and the framework handles the creation and management of these beans, which are the objects in your application.\
\
Spring Boot is a way to use the Spring framework more easily. It's like an assistant that takes care of a lot of the setup and configuration automatically. With Spring Boot, you can start a new project quickly without worrying about configuring everything manually. It's especially good for building services with minimal fuss.
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\pardeftab560\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Example:
\f1\b0 \strokec2  You can create a Spring Boot application that runs a web server, without needing to deploy it to an external server, by using annotations like 
\f3\fs26 \strokec2 @SpringBootApplication
\f1\fs24 \strokec2  and including dependencies in your build file (e.g., Maven or Gradle).\
\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 What is the relation between Spring platform and Spring Boot?\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \strokec2 Spring Boot is part of the Spring ecosystem, which is a bigger collection of tools for building Java applications. Spring Boot builds on the features of the Spring framework, making it faster and easier to get an application up and running. It follows "convention over configuration" to reduce the amount of setup needed.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 \strokec2 Example:
\f1\b0 \strokec2  The Spring Framework provides core functionality like dependency injection and aspect-oriented programming, which are then utilized and extended by other projects within the Spring platform like Spring Boot for rapid application development.\
\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 What is the relation between Spring platform and Spring framework?\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \strokec2 The Spring framework is the core of the Spring platform. The platform includes the framework itself plus a bunch of other projects that extend or enhance its capabilities, like Spring Boot for quick application setup, Spring Data for database interaction, and Spring Security for securing applications.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 What is Dependency Injection and how is it done in the Spring platform/framework?\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \strokec2 Dependency Injection is a design pattern that Spring uses to help keep your code clean and the components of your applications easy to manage. It involves the framework passing dependencies into objects rather than the objects creating them themselves. In Spring, you can inject dependencies through constructors, setters, or directly into fields, with Spring managing these objects and their lifecycles.\
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 What is Inversion of Control (IoC) and how is it related to Spring?\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 \strokec2 Inversion of Control is a principle that takes the responsibility for managing objects away from your application code and gives it to a framework or container, like Spring. This is mainly managed through something called the Spring IoC container, which handles the creation, configuration, and management of all the beans (objects) defined in your application. This helps reduce the dependency between components, making your code easier to test and maintain.\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 \strokec2 Example:
\f1\b0 \strokec2  Spring IoC container manages beans defined in the Spring application context, creating and assembling dependencies automatically
\f2\fs26 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\pardeftab560\pardirnatural\partightenfactor0
\cf0 \
}